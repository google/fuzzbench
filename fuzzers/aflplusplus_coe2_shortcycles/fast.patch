diff --git a/GNUmakefile b/GNUmakefile
index d47f824..ce7eeda 100644
--- a/GNUmakefile
+++ b/GNUmakefile
@@ -205,7 +205,7 @@ endif
 
 ifneq "$(filter Linux GNU%,$(shell uname))" ""
   override CFLAGS += -D_FORTIFY_SOURCE=2
-  LDFLAGS += -ldl -lrt
+  LDFLAGS += -ldl -lrt -lm
 endif
 
 ifneq "$(findstring FreeBSD, $(shell uname))" ""
diff --git a/include/afl-fuzz.h b/include/afl-fuzz.h
index 9e46986..9677b01 100644
--- a/include/afl-fuzz.h
+++ b/include/afl-fuzz.h
@@ -244,14 +244,13 @@ enum {
 
   /* 00 */ EXPLORE, /* AFL default, Exploration-based constant schedule */
   /* 01 */ EXPLOIT, /* AFL's exploitation-based const.  */
-  /* 02 */ FAST,    /* Exponential schedule             */
-  /* 03 */ COE,     /* Cut-Off Exponential schedule     */
+  /* 02 */ FAST2,
+  /* 03 */ COE2,
   /* 04 */ LIN,     /* Linear schedule                  */
   /* 05 */ QUAD,    /* Quadratic schedule               */
   /* 06 */ RARE,    /* Rare edges                       */
   /* 07 */ MMOPT,   /* Modified MOPT schedule           */
   /* 08 */ SEEK,    /* EXPLORE that ignores timings     */
-
   POWER_SCHEDULES_NUM
 
 };
diff --git a/include/config.h b/include/config.h
index 8cc7007..241e5d4 100644
--- a/include/config.h
+++ b/include/config.h
@@ -109,17 +109,13 @@
 /* Maximum multiplier for the above (should be a power of two, beware
    of 32-bit int overflows): */
 
-#define HAVOC_MAX_MULT 16
+#define HAVOC_MAX_MULT 32
 #define HAVOC_MAX_MULT_MOPT 32
 
 /* Absolute minimum number of havoc cycles (after all adjustments): */
 
 #define HAVOC_MIN 16
 
-/* Power Schedule Divisor */
-#define POWER_BETA 1
-#define MAX_FACTOR (POWER_BETA * 32)
-
 /* Maximum stacking for havoc-stage tweaks. The actual value is calculated
    like this:
 
diff --git a/src/afl-fuzz-bitmap.c b/src/afl-fuzz-bitmap.c
index 1b9df62..eb16222 100644
--- a/src/afl-fuzz-bitmap.c
+++ b/src/afl-fuzz-bitmap.c
@@ -551,7 +551,7 @@ save_if_interesting(afl_state_t *afl, void *mem, u32 len, u8 fault) {
 
   /* Generating a hash on every input is super expensive. Bad idea and should
      only be used for special schedules */
-  if (unlikely(afl->schedule >= FAST && afl->schedule <= RARE)) {
+  if (unlikely(afl->schedule >= FAST2 && afl->schedule <= RARE)) {
 
     cksum = hash64(afl->fsrv.trace_bits, afl->fsrv.map_size, HASH_CONST);
 
diff --git a/src/afl-fuzz-queue.c b/src/afl-fuzz-queue.c
index 336b7f4..bfa2da2 100644
--- a/src/afl-fuzz-queue.c
+++ b/src/afl-fuzz-queue.c
@@ -25,6 +25,7 @@
 #include "afl-fuzz.h"
 #include <limits.h>
 #include <ctype.h>
+#include <math.h>
 
 /* Mark deterministic checks as done for a particular queue entry. We use the
    .state file to avoid repeating deterministic fuzzing when resuming aborted
@@ -303,12 +304,6 @@ void update_bitmap_score(afl_state_t *afl, struct queue_entry *q) {
 
   u32 i;
   u64 fav_factor;
-  u64 fuzz_p2;
-
-  if (unlikely(afl->schedule >= FAST && afl->schedule <= RARE))
-    fuzz_p2 = next_pow2(q->n_fuzz);
-  else
-    fuzz_p2 = q->fuzz_level;
 
   if (unlikely(afl->schedule >= RARE) || unlikely(afl->fixed_seed)) {
 
@@ -330,11 +325,6 @@ void update_bitmap_score(afl_state_t *afl, struct queue_entry *q) {
 
         /* Faster-executing or smaller test cases are favored. */
         u64 top_rated_fav_factor;
-        u64 top_rated_fuzz_p2;
-        if (unlikely(afl->schedule >= FAST && afl->schedule <= RARE))
-          top_rated_fuzz_p2 = next_pow2(afl->top_rated[i]->n_fuzz);
-        else
-          top_rated_fuzz_p2 = afl->top_rated[i]->fuzz_level;
 
         if (unlikely(afl->schedule >= RARE) || unlikely(afl->fixed_seed)) {
 
@@ -347,16 +337,6 @@ void update_bitmap_score(afl_state_t *afl, struct queue_entry *q) {
 
         }
 
-        if (fuzz_p2 > top_rated_fuzz_p2) {
-
-          continue;
-
-        } else if (fuzz_p2 == top_rated_fuzz_p2) {
-
-          if (fav_factor > top_rated_fav_factor) { continue; }
-
-        }
-
         if (unlikely(afl->schedule >= RARE) || unlikely(afl->fixed_seed)) {
 
           if (fav_factor > afl->top_rated[i]->len << 2) { continue; }
@@ -486,6 +466,7 @@ void cull_queue(afl_state_t *afl) {
    A helper function for fuzz_one(). Maybe some of these constants should
    go into config.h. */
 
+double reduce_factor;
 u32 calculate_score(afl_state_t *afl, struct queue_entry *q) {
 
   u32 avg_exec_us = afl->total_cal_us / afl->total_cal_cycles;
@@ -572,12 +553,12 @@ u32 calculate_score(afl_state_t *afl, struct queue_entry *q) {
   if (q->handicap >= 4) {
 
     perf_score *= 4;
-    q->handicap -= 4;
+    q->handicap /= 4;
 
   } else if (q->handicap) {
 
     perf_score *= 2;
-    --q->handicap;
+    q->handicap /= 2;
 
   }
 
@@ -603,11 +584,9 @@ u32 calculate_score(afl_state_t *afl, struct queue_entry *q) {
 
   }
 
-  u64 fuzz = q->n_fuzz;
-  u64 fuzz_total;
+  u32 n_paths;
+  long double fuzz_mu;
 
-  u32 n_paths, fuzz_mu;
-  u32 factor = 1;
 
   switch (afl->schedule) {
 
@@ -618,66 +597,92 @@ u32 calculate_score(afl_state_t *afl, struct queue_entry *q) {
       break;
 
     case EXPLOIT:
-      factor = MAX_FACTOR;
+      perf_score *= 4;
       break;
 
-    case COE:
-      fuzz_total = 0;
+    case COE2:
+      fuzz_mu = 0.0;
       n_paths = 0;
 
+      /* Don't modify perf_score in the first cycle or for handicapped seeds
+         or for unfuzzed seeds. */
+      if (afl->queue_cycle == 1 || q->handicap > 0 || q->fuzz_level == 0) break;
+
       struct queue_entry *queue_it = afl->queue;
       while (queue_it) {
 
-        fuzz_total += queue_it->n_fuzz;
+        fuzz_mu += log2(queue_it->n_fuzz);
         n_paths++;
+
         queue_it = queue_it->next;
 
       }
 
       if (unlikely(!n_paths)) { FATAL("Queue state corrupt"); }
 
-      fuzz_mu = fuzz_total / n_paths;
-      if (fuzz <= fuzz_mu) {
-
-        if (q->fuzz_level < 16) {
-
-          factor = ((u32)(1 << q->fuzz_level));
-
-        } else {
-
-          factor = MAX_FACTOR;
-
+      fuzz_mu = fuzz_mu / n_paths;
+
+      if (log2(q->n_fuzz) <= fuzz_mu) {
+
+        switch ((u32)log2(q->n_fuzz)) {
+          case 0 ... 1:
+            perf_score *= 4;
+            break;
+          case 2 ... 3:
+            perf_score *= 3;
+            break;
+          case 4 ... 5:
+            perf_score *= 2;
+            break;
+          case 6 ... 7:
+            break;
+          default:
+            if (!q->favored) perf_score *= 0.75;
+            break;
         }
 
-      } else {
+      // Never skip favourites.
+      } else if (!q->favored){
 
-        factor = 0;
+        perf_score = 0;
 
       }
 
-      break;
+      if (q->favored)
+        perf_score *= 1.15;
 
-    case FAST:
-      if (q->fuzz_level < 16) {
-
-        factor = ((u32)(1 << q->fuzz_level)) / (fuzz == 0 ? 1 : fuzz);
-
-      } else {
-
-        factor = MAX_FACTOR / (fuzz == 0 ? 1 : next_pow2(fuzz));
+      break;
 
+    case FAST2:
+
+      /* Don't modify perf_score in the first cycle or for handicapped seeds
+         or for unfuzzed seeds. */
+      if (afl->queue_cycle == 1 || q->handicap > 0 || q->fuzz_level == 0) break;
+
+      switch ((u32)log2(q->n_fuzz)) {
+        case 0 ... 1:
+          perf_score *= 4;
+          break;
+        case 2 ... 3:
+          perf_score *= 3;
+          break;
+        case 4 ... 5:
+          perf_score *= 2;
+          break;
+        case 6 ... 7:
+          break;
+        default:
+          if (!q->favored) perf_score *= 0.75;
+          break;
       }
 
-      break;
+      if (q->favored)
+        perf_score *= 1.15;
 
-    case LIN:
-      factor = q->fuzz_level / (fuzz == 0 ? 1 : fuzz);
       break;
 
+    case LIN:
     case QUAD:
-      factor = q->fuzz_level * q->fuzz_level / (fuzz == 0 ? 1 : fuzz);
-      break;
-
     case MMOPT:
       /* -- this was a more complex setup, which is good, but competed with
          -- rare. the simpler algo however is good when rare is not.
@@ -710,25 +715,30 @@ u32 calculate_score(afl_state_t *afl, struct queue_entry *q) {
 
   }
 
-  if (unlikely(afl->schedule >= FAST && afl->schedule <= RARE)) {
-
-    if (factor > MAX_FACTOR) { factor = MAX_FACTOR; }
-    perf_score *= factor / POWER_BETA;
-
-  }
-
   // MOpt mode
   if (afl->limit_time_sig != 0 && afl->max_depth - q->depth < 3) {
 
     perf_score *= 2;
 
-  } else if (perf_score < 1) {
+  } else if (afl->schedule != COE2 && perf_score < 1) {
 
     // Add a lower bound to AFLFast's energy assignment strategies
     perf_score = 1;
 
   }
 
+  // Shorter cycles for programs with many seeds
+  if (afl->queue_cycle == 1) {
+    if (afl->queued_paths < 500) reduce_factor = 1;
+    else if (afl->queued_paths < 1000) reduce_factor = 0.9;
+    else if (afl->queued_paths < 2000) reduce_factor = 0.8;
+    else if (afl->queued_paths < 4000) reduce_factor = 0.6;
+    else if (afl->queued_paths < 6000) reduce_factor = 0.4;
+    else reduce_factor = 0.2;
+  }
+  perf_score *= reduce_factor;
+
+
   /* Make sure that we don't go over limit. */
 
   if (perf_score > afl->havoc_max_mult * 100) {
diff --git a/src/afl-fuzz.c b/src/afl-fuzz.c
index 9196d78..fb77732 100644
--- a/src/afl-fuzz.c
+++ b/src/afl-fuzz.c
@@ -320,13 +320,13 @@ int main(int argc, char **argv_orig, char **envp) {
 
       case 'p':                                           /* Power schedule */
 
-        if (!stricmp(optarg, "fast")) {
+        if (!stricmp(optarg, "fast2")) {
 
-          afl->schedule = FAST;
+          afl->schedule = FAST2;
 
-        } else if (!stricmp(optarg, "coe")) {
+        } else if (!stricmp(optarg, "coe2")) {
 
-          afl->schedule = COE;
+          afl->schedule = COE2;
 
         } else if (!stricmp(optarg, "exploit")) {
 
@@ -900,20 +900,20 @@ int main(int argc, char **argv_orig, char **envp) {
 
   switch (afl->schedule) {
 
-    case FAST:
-      OKF("Using exponential power schedule (FAST)");
+    case FAST2:
+      OKF("Using exponential power schedule (FAST2)");
       break;
-    case COE:
-      OKF("Using cut-off exponential power schedule (COE)");
+    case COE2:
+      OKF("Using cut-off exponential power schedule (COE2)");
       break;
     case EXPLOIT:
       OKF("Using exploitation-based constant power schedule (EXPLOIT)");
       break;
     case LIN:
-      OKF("Using linear power schedule (LIN)");
+      OKF("[DEPRECATED] Using linear power schedule (LIN)");
       break;
     case QUAD:
-      OKF("Using quadratic power schedule (QUAD)");
+      OKF("[DEPRECATED] Using quadratic power schedule (QUAD)");
       break;
     case MMOPT:
       OKF("Using modified MOpt power schedule (MMOPT)");
@@ -1409,10 +1409,10 @@ int main(int argc, char **argv_orig, char **envp) {
           case SEEK:
             afl->schedule = EXPLORE;
             break;
-          case FAST:
-            afl->schedule = COE;
+          case FAST2:
+            afl->schedule = COE2;
             break;
-          case COE:
+          case COE2:
             afl->schedule = LIN;
             break;
           case LIN:
@@ -1422,7 +1422,7 @@ int main(int argc, char **argv_orig, char **envp) {
             afl->schedule = RARE;
             break;
           case RARE:
-            afl->schedule = FAST;
+            afl->schedule = FAST2;
             break;
 
         }
