diff --git a/include/afl-fuzz.h b/include/afl-fuzz.h
index 85b3179..dd0f26a 100644
--- a/include/afl-fuzz.h
+++ b/include/afl-fuzz.h
@@ -968,7 +968,7 @@ void add_to_queue(afl_state_t *, u8 *, u32, u8);
 void destroy_queue(afl_state_t *);
 void update_bitmap_score(afl_state_t *, struct queue_entry *);
 void cull_queue(afl_state_t *);
-u32  calculate_score(afl_state_t *, struct queue_entry *);
+u32  calculate_score(afl_state_t *, struct queue_entry *, double);
 
 /* Bitmap */
 
diff --git a/src/afl-fuzz-one.c b/src/afl-fuzz-one.c
index 1e63abc..bb6272f 100644
--- a/src/afl-fuzz-one.c
+++ b/src/afl-fuzz-one.c
@@ -447,8 +447,10 @@ u8 fuzz_one_original(afl_state_t *afl) {
 
   if (unlikely(afl->not_on_tty)) {
 
-    ACTF("Fuzzing test case #%u (%u total, %llu uniq crashes found)...",
-         afl->current_entry, afl->queued_paths, afl->unique_crashes);
+    ACTF("Fuzzing test case #%u (%u total, %llu uniq crashes found, perf_score=%0.0f, exec_us=%llu, hits=%u)...",
+         afl->current_entry, afl->queued_paths, afl->unique_crashes,
+         afl->queue_cur->perf_score, afl->queue_cur->exec_us,
+         afl->n_fuzz[afl->queue_cur->n_fuzz_entry]);
     fflush(stdout);
 
   }
@@ -535,7 +537,8 @@ u8 fuzz_one_original(afl_state_t *afl) {
   if (likely(!afl->old_seed_selection))
     orig_perf = perf_score = afl->queue_cur->perf_score;
   else
-    orig_perf = perf_score = calculate_score(afl, afl->queue_cur);
+    orig_perf = perf_score = calculate_score(afl, afl->queue_cur, 0); //FIXME
+
 
   if (unlikely(perf_score == 0)) { goto abandon_entry; }
 
@@ -2577,8 +2580,10 @@ static u8 mopt_common_fuzzing(afl_state_t *afl, MOpt_globals_t MOpt_globals) {
 
   if (afl->not_on_tty) {
 
-    ACTF("Fuzzing test case #%u (%u total, %llu uniq crashes found)...",
-         afl->current_entry, afl->queued_paths, afl->unique_crashes);
+    ACTF("Fuzzing test case #%u (%u total, %llu uniq crashes found, perf_score=%0.0f, exec_us=%llu, hits=%u)...",
+         afl->current_entry, afl->queued_paths, afl->unique_crashes,
+         afl->queue_cur->perf_score, afl->queue_cur->exec_us,
+         afl->n_fuzz[afl->queue_cur->n_fuzz_entry]);
     fflush(stdout);
 
   }
@@ -2667,7 +2672,7 @@ static u8 mopt_common_fuzzing(afl_state_t *afl, MOpt_globals_t MOpt_globals) {
   if (likely(!afl->old_seed_selection))
     orig_perf = perf_score = afl->queue_cur->perf_score;
   else
-    orig_perf = perf_score = calculate_score(afl, afl->queue_cur);
+    orig_perf = perf_score = calculate_score(afl, afl->queue_cur, 0); //FIXME
 
   if (unlikely(afl->shm.cmplog_mode && !afl->queue_cur->fully_colorized)) {
 
diff --git a/src/afl-fuzz-queue.c b/src/afl-fuzz-queue.c
index c78df8b..c14838c 100644
--- a/src/afl-fuzz-queue.c
+++ b/src/afl-fuzz-queue.c
@@ -42,6 +42,15 @@ inline u32 select_next_queue_entry(afl_state_t *afl) {
 
 }
 
+double calculate_factor(afl_state_t *afl, struct queue_entry *q) {
+
+  u32 avg_exec_us = afl->total_cal_us / afl->total_cal_cycles;
+  u32 hits = afl->n_fuzz[q->n_fuzz_entry];
+
+  return 1 - powl(1 - 1.0 / (hits + 1), avg_exec_us / (double)q->exec_us);
+
+}
+
 /* create the alias table that allows weighted random selection - expensive */
 
 void create_alias_table(afl_state_t *afl) {
@@ -60,13 +69,28 @@ void create_alias_table(afl_state_t *afl) {
   memset((void *)afl->alias_table, 0, n * sizeof(u32));
   memset((void *)afl->alias_probability, 0, n * sizeof(double));
 
-  double sum = 0;
 
+  u32 n_paths = 0;
+  double factor_mu = 0.0;
+  for (i = 0; i < n; i++) {
+
+    struct queue_entry *q = afl->queue_buf[i];
+    if (q->fuzz_level != 0) {
+
+      factor_mu += calculate_factor(afl, afl->queue_buf[i]);
+      n_paths++;
+
+    }
+
+  }
+  factor_mu /= n_paths;
+
+  double sum = 0;
   for (i = 0; i < n; i++) {
 
     struct queue_entry *q = afl->queue_buf[i];
 
-    if (!q->disabled) { q->perf_score = calculate_score(afl, q); }
+    if (!q->disabled) { q->perf_score = calculate_score(afl, q, factor_mu); }
 
     sum += q->perf_score;
 
@@ -598,7 +622,7 @@ void cull_queue(afl_state_t *afl) {
    A helper function for fuzz_one(). Maybe some of these constants should
    go into config.h. */
 
-u32 calculate_score(afl_state_t *afl, struct queue_entry *q) {
+u32 calculate_score(afl_state_t *afl, struct queue_entry *q, double factor_mu) {
 
   u32 avg_exec_us = afl->total_cal_us / afl->total_cal_cycles;
   u32 avg_bitmap_size = afl->total_bitmap_size / afl->total_bitmap_entries;
@@ -715,7 +739,6 @@ u32 calculate_score(afl_state_t *afl, struct queue_entry *q) {
 
   }
 
-  u32         n_paths;
   double      factor = 1.0;
   long double fuzz_mu;
 
@@ -733,7 +756,6 @@ u32 calculate_score(afl_state_t *afl, struct queue_entry *q) {
 
     case COE:
       fuzz_mu = 0.0;
-      n_paths = 0;
 
       // Don't modify perf_score for unfuzzed seeds
       if (q->fuzz_level == 0) break;
@@ -742,15 +764,12 @@ u32 calculate_score(afl_state_t *afl, struct queue_entry *q) {
       while (queue_it) {
 
         fuzz_mu += log2(afl->n_fuzz[q->n_fuzz_entry]);
-        n_paths++;
 
         queue_it = queue_it->next;
 
       }
 
-      if (unlikely(!n_paths)) { FATAL("Queue state corrupt"); }
-
-      fuzz_mu = fuzz_mu / n_paths;
+      fuzz_mu /= afl->queued_paths;
 
       if (log2(afl->n_fuzz[q->n_fuzz_entry]) > fuzz_mu) {
 
@@ -767,38 +786,9 @@ u32 calculate_score(afl_state_t *afl, struct queue_entry *q) {
       // Don't modify unfuzzed seeds
       if (q->fuzz_level == 0) break;
 
-      switch ((u32)log2(afl->n_fuzz[q->n_fuzz_entry])) {
-
-        case 0 ... 1:
-          factor = 4;
-          break;
-
-        case 2 ... 3:
-          factor = 3;
-          break;
-
-        case 4:
-          factor = 2;
-          break;
-
-        case 5:
-          break;
-
-        case 6:
-          if (!q->favored) factor = 0.8;
-          break;
-
-        case 7:
-          if (!q->favored) factor = 0.6;
-          break;
-
-        default:
-          if (!q->favored) factor = 0.4;
-          break;
-
-      }
-
-      if (q->favored) factor *= 1.15;
+      factor = calculate_factor(afl, q); 
+//      fprintf(stderr, "%0.10f / %0.10f = %0.10f\n", factor, factor_mu, factor / factor_mu);
+      factor /= factor_mu;
 
       break;
 
@@ -843,10 +833,10 @@ u32 calculate_score(afl_state_t *afl, struct queue_entry *q) {
 
   }
 
-  if (unlikely(afl->schedule >= EXPLOIT && afl->schedule <= QUAD)) {
+  if (afl->schedule >= EXPLOIT && afl->schedule <= QUAD) {
 
     if (factor > MAX_FACTOR) { factor = MAX_FACTOR; }
-    perf_score *= factor / POWER_BETA;
+    perf_score *= factor;
 
   }
 
