diff --git a/include/afl-fuzz.h b/include/afl-fuzz.h
index 85b3179..e9455c3 100644
--- a/include/afl-fuzz.h
+++ b/include/afl-fuzz.h
@@ -167,7 +167,8 @@ struct queue_entry {
   u8 *trace_mini;                       /* Trace bytes, if kept             */
   u32 tc_ref;                           /* Trace bytes ref count            */
 
-  double perf_score;                    /* performance score                */
+  double perf_score,                    /* performance score                */
+         weight;
 
   u8 *testcase_buf;                     /* The testcase buffer, if loaded.  */
 
@@ -508,7 +509,7 @@ typedef struct afl_state {
   u8 *var_bytes;                        /* Bytes that appear to be variable */
 
 #define N_FUZZ_SIZE (1 << 21)
-  u32 *n_fuzz;
+  u8 *n_fuzz;
 
   volatile u8 stop_soon,                /* Ctrl-C pressed?                  */
       clear_screen;                     /* Window resized?                  */
diff --git a/src/afl-fuzz-bitmap.c b/src/afl-fuzz-bitmap.c
index 2653b9f..b129d01 100644
--- a/src/afl-fuzz-bitmap.c
+++ b/src/afl-fuzz-bitmap.c
@@ -556,7 +556,7 @@ save_if_interesting(afl_state_t *afl, void *mem, u32 len, u8 fault) {
     cksum = hash64(afl->fsrv.trace_bits, afl->fsrv.map_size, HASH_CONST);
 
     /* Saturated increment */
-    if (afl->n_fuzz[cksum % N_FUZZ_SIZE] < 0xFFFFFFFF)
+    if (afl->n_fuzz[cksum % N_FUZZ_SIZE] < 0xFF)
       afl->n_fuzz[cksum % N_FUZZ_SIZE]++;
 
   }
diff --git a/src/afl-fuzz-queue.c b/src/afl-fuzz-queue.c
index d107dbc..033ccd5 100644
--- a/src/afl-fuzz-queue.c
+++ b/src/afl-fuzz-queue.c
@@ -42,6 +42,18 @@ inline u32 select_next_queue_entry(afl_state_t *afl) {
 
 }
 
+u32 compute_weight(afl_state_t *afl, struct queue_entry *q) {
+
+  u8 hits = afl->n_fuzz[q->n_fuzz_entry];
+  if (hits == 0) hits = 1;
+
+  u32 weight = 1024.0 / hits;
+  if (q->favored) weight *= 20;
+  weight /= (q->fuzz_level + 1.0);
+
+  return weight > 1 ? weight : 1;
+}
+
 /* create the alias table that allows weighted random selection - expensive */
 
 void create_alias_table(afl_state_t *afl) {
@@ -66,7 +78,10 @@ void create_alias_table(afl_state_t *afl) {
 
     struct queue_entry *q = afl->queue_buf[i];
 
-    if (!q->disabled) { q->perf_score = calculate_score(afl, q); }
+    if (!q->disabled) { 
+      q->weight = compute_weight(afl, q); 
+      q->perf_score = calculate_score(afl, q);
+    }
 
     sum += q->perf_score;
 
@@ -75,7 +90,7 @@ void create_alias_table(afl_state_t *afl) {
   for (i = 0; i < n; i++) {
 
     struct queue_entry *q = afl->queue_buf[i];
-    P[i] = (q->perf_score * n) / sum;
+    P[i] = (q->weight * n) / sum;
 
   }
 
@@ -767,28 +782,28 @@ u32 calculate_score(afl_state_t *afl, struct queue_entry *q) {
       // Don't modify unfuzzed seeds
       if (q->fuzz_level == 0) break;
 
-      switch ((u32)log2(afl->n_fuzz[q->n_fuzz_entry])) {
+      switch (afl->n_fuzz[q->n_fuzz_entry]) {
 
-        case 0 ... 1:
+        case 0 ... 3:
           factor = 4;
           break;
 
-        case 2 ... 3:
+        case 4 ... 15:
           factor = 3;
           break;
 
-        case 4:
+        case 16 ... 31:
           factor = 2;
           break;
 
-        case 5:
+        case 32 ... 63:
           break;
 
-        case 6:
+        case 64 ... 127:
           if (!q->favored) factor = 0.8;
           break;
 
-        case 7:
+        case 128 ... 254:
           if (!q->favored) factor = 0.6;
           break;
 
diff --git a/src/afl-fuzz.c b/src/afl-fuzz.c
index 22e6d57..c562845 100644
--- a/src/afl-fuzz.c
+++ b/src/afl-fuzz.c
@@ -966,7 +966,7 @@ int main(int argc, char **argv_orig, char **envp) {
   /* Dynamically allocate memory for AFLFast schedules */
   if (afl->schedule >= FAST && afl->schedule <= RARE) {
 
-    afl->n_fuzz = ck_alloc(N_FUZZ_SIZE * sizeof(u32));
+    afl->n_fuzz = ck_alloc(N_FUZZ_SIZE * sizeof(u8));
 
   }
 
