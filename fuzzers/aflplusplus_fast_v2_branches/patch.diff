diff --git a/include/afl-fuzz.h b/include/afl-fuzz.h
index e59d5f9..99cc3e5 100644
--- a/include/afl-fuzz.h
+++ b/include/afl-fuzz.h
@@ -150,6 +150,7 @@ struct queue_entry {
       has_new_cov,                      /* Triggers new coverage?           */
       var_behavior,                     /* Variable behavior?               */
       favored,                          /* Currently favored?               */
+      champion,
       fs_redundant,                     /* Marked as redundant in the fs?   */
       fully_colorized,                  /* Do not run redqueen stage again  */
       is_ascii,                         /* Is the input just ascii text?    */
@@ -167,7 +168,8 @@ struct queue_entry {
   u8 *trace_mini;                       /* Trace bytes, if kept             */
   u32 tc_ref;                           /* Trace bytes ref count            */
 
-  double perf_score;                    /* performance score                */
+  double perf_score,                    /* performance score                */
+         weight;
 
   u8 *testcase_buf;                     /* The testcase buffer, if loaded.  */
 
@@ -500,7 +502,8 @@ typedef struct afl_state {
 
   u8 *virgin_bits,                      /* Regions yet untouched by fuzzing */
       *virgin_tmout,                    /* Bits we haven't seen in tmouts   */
-      *virgin_crash;                    /* Bits we haven't seen in crashes  */
+      *virgin_crash,                    /* Bits we haven't seen in crashes  */
+      *branch_hit_counts;
 
   double *alias_probability;            /* alias weighted probabilities     */
   u32 *   alias_table;                /* alias weighted random lookup table */
@@ -523,6 +526,7 @@ typedef struct afl_state {
       queued_with_cov,                  /* Paths with new coverage bytes    */
       pending_not_fuzzed,               /* Queued but not done yet          */
       pending_favored,                  /* Pending favored paths            */
+      pending_champions,
       cur_skipped_paths,                /* Abandoned inputs in cur cycle    */
       cur_depth,                        /* Current path depth               */
       max_depth,                        /* Max path depth                   */
diff --git a/src/afl-fuzz-bitmap.c b/src/afl-fuzz-bitmap.c
index 735420c..77011c5 100644
--- a/src/afl-fuzz-bitmap.c
+++ b/src/afl-fuzz-bitmap.c
@@ -63,6 +63,7 @@ u8 __attribute__((hot)) has_new_bits(afl_state_t *afl, u8 *virgin_map) {
 
   u64 *current = (u64 *)afl->fsrv.trace_bits;
   u64 *virgin = (u64 *)virgin_map;
+  u64 *hits = (u64*)afl->branch_hit_counts;
 
   u32 i = (afl->fsrv.map_size >> 3);
 
@@ -70,6 +71,7 @@ u8 __attribute__((hot)) has_new_bits(afl_state_t *afl, u8 *virgin_map) {
 
   u32 *current = (u32 *)afl->fsrv.trace_bits;
   u32 *virgin = (u32 *)virgin_map;
+  u32 *hits = (u32*)afl->branch_hit_counts;
 
   u32 i = (afl->fsrv.map_size >> 2);
 
@@ -86,11 +88,20 @@ u8 __attribute__((hot)) has_new_bits(afl_state_t *afl, u8 *virgin_map) {
        almost always be the case. */
 
     // the (*current) is unnecessary but speeds up the overall comparison
-    if (unlikely(*current) && unlikely(*current & *virgin)) {
+    if (unlikely(*current)) {
+      u8 *cur = (u8*) current;
+      u8 *hit = (u8*) hits;
+#ifdef WORD_SIZE_64
+      for (int i = 0; i < 8; i++)
+#else
+      for (int i = 0; i < 4; i++)
+#endif
+        if (cur[i] && hit[i] < 0xFF) hit[i]++;
+
+      if (unlikely(*current & *virgin)) {
 
       if (likely(ret < 2)) {
 
-        u8 *cur = (u8 *)current;
         u8 *vir = (u8 *)virgin;
 
         /* Looks like we have not found any new bytes yet; see if any non-zero
@@ -128,9 +139,11 @@ u8 __attribute__((hot)) has_new_bits(afl_state_t *afl, u8 *virgin_map) {
       *virgin &= ~*current;
 
     }
+    }
 
     ++current;
     ++virgin;
+    ++hits;
 
   }
 
diff --git a/src/afl-fuzz-one.c b/src/afl-fuzz-one.c
index 91bbced..d711611 100644
--- a/src/afl-fuzz-one.c
+++ b/src/afl-fuzz-one.c
@@ -445,8 +445,10 @@ u8 fuzz_one_original(afl_state_t *afl) {
 
   if (unlikely(afl->not_on_tty)) {
 
-    ACTF("Fuzzing test case #%u (%u total, %llu uniq crashes found)...",
-         afl->current_entry, afl->queued_paths, afl->unique_crashes);
+    ACTF("Fuzzing test case #%u (%u total, %llu uniq crashes found, perf_score=%0.0f, exec_us=%llu, hits=%u, map=%u)...",
+         afl->current_entry, afl->queued_paths, afl->unique_crashes,
+         afl->queue_cur->perf_score, afl->queue_cur->exec_us,
+         afl->n_fuzz[afl->queue_cur->n_fuzz_entry], afl->queue_cur->bitmap_size);
     fflush(stdout);
 
   }
diff --git a/src/afl-fuzz-queue.c b/src/afl-fuzz-queue.c
index c78df8b..7b1039c 100644
--- a/src/afl-fuzz-queue.c
+++ b/src/afl-fuzz-queue.c
@@ -42,6 +42,22 @@ inline u32 select_next_queue_entry(afl_state_t *afl) {
 
 }
 
+double compute_weight(afl_state_t *afl, struct queue_entry *q, double avg_exec_us, double avg_bitmap_size) {
+
+  u32 hits = afl->n_fuzz[q->n_fuzz_entry];
+  if (hits == 0) hits = 1;
+
+  double weight = 1.0;
+  weight *= avg_exec_us / q->exec_us;
+  weight *= log(q->bitmap_size) / avg_bitmap_size;
+  weight /= log10(hits) + 1;
+
+  if (q->favored) weight *= 5;
+  if (q->champion) weight *= 2;
+
+  return weight;
+}
+
 /* create the alias table that allows weighted random selection - expensive */
 
 void create_alias_table(afl_state_t *afl) {
@@ -60,25 +76,35 @@ void create_alias_table(afl_state_t *afl) {
   memset((void *)afl->alias_table, 0, n * sizeof(u32));
   memset((void *)afl->alias_probability, 0, n * sizeof(double));
 
-  double sum = 0;
-
+  double avg_exec_us = 0.0;
+  double avg_bitmap_size = 0.0;
   for (i = 0; i < n; i++) {
 
     struct queue_entry *q = afl->queue_buf[i];
-
-    if (!q->disabled) { q->perf_score = calculate_score(afl, q); }
-
-    sum += q->perf_score;
+    avg_exec_us += q->exec_us;
+    avg_bitmap_size += log(q->bitmap_size);
 
   }
+  avg_exec_us /= afl->queued_paths;
+  avg_bitmap_size /= afl->queued_paths;
 
+  double sum = 0;
   for (i = 0; i < n; i++) {
 
     struct queue_entry *q = afl->queue_buf[i];
-    P[i] = (q->perf_score * n) / sum;
+
+    if (!q->disabled) {
+      q->weight = compute_weight(afl, q, avg_exec_us, avg_bitmap_size);
+      q->perf_score = calculate_score(afl, q);
+    }
+
+    sum += q->weight;
 
   }
 
+  for (i = 0; i < n; i++)
+    P[i] = (afl->queue_buf[i]->weight * n) / sum;
+
   int nS = 0, nL = 0, s;
   for (s = (s32)n - 1; s >= 0; --s) {
 
@@ -538,12 +564,14 @@ void cull_queue(afl_state_t *afl) {
 
   afl->queued_favored = 0;
   afl->pending_favored = 0;
+  afl->pending_champions = 0;
 
   q = afl->queue;
 
   while (q) {
 
     q->favored = 0;
+    q->champion = 0;
     q = q->next;
 
   }
@@ -579,6 +607,13 @@ void cull_queue(afl_state_t *afl) {
 
       }
 
+      if (afl->branch_hit_counts[i] < 0xFF) {
+
+        afl->top_rated[i]->champion = 1;
+        afl->pending_champions++;
+
+      }
+
     }
 
   }
@@ -715,151 +750,11 @@ u32 calculate_score(afl_state_t *afl, struct queue_entry *q) {
 
   }
 
-  u32         n_paths;
-  double      factor = 1.0;
-  long double fuzz_mu;
-
-  switch (afl->schedule) {
-
-    case EXPLORE:
-      break;
-
-    case SEEK:
-      break;
-
-    case EXPLOIT:
-      factor = MAX_FACTOR;
-      break;
-
-    case COE:
-      fuzz_mu = 0.0;
-      n_paths = 0;
-
-      // Don't modify perf_score for unfuzzed seeds
-      if (q->fuzz_level == 0) break;
-
-      struct queue_entry *queue_it = afl->queue;
-      while (queue_it) {
-
-        fuzz_mu += log2(afl->n_fuzz[q->n_fuzz_entry]);
-        n_paths++;
-
-        queue_it = queue_it->next;
-
-      }
-
-      if (unlikely(!n_paths)) { FATAL("Queue state corrupt"); }
-
-      fuzz_mu = fuzz_mu / n_paths;
-
-      if (log2(afl->n_fuzz[q->n_fuzz_entry]) > fuzz_mu) {
-
-        /* Never skip favourites */
-        if (!q->favored) factor = 0;
-
-        break;
-
-      }
-
-    // Fall through
-    case FAST:
-
-      // Don't modify unfuzzed seeds
-      if (q->fuzz_level == 0) break;
-
-      switch ((u32)log2(afl->n_fuzz[q->n_fuzz_entry])) {
-
-        case 0 ... 1:
-          factor = 4;
-          break;
-
-        case 2 ... 3:
-          factor = 3;
-          break;
-
-        case 4:
-          factor = 2;
-          break;
-
-        case 5:
-          break;
-
-        case 6:
-          if (!q->favored) factor = 0.8;
-          break;
-
-        case 7:
-          if (!q->favored) factor = 0.6;
-          break;
-
-        default:
-          if (!q->favored) factor = 0.4;
-          break;
-
-      }
-
-      if (q->favored) factor *= 1.15;
-
-      break;
-
-    case LIN:
-      factor = q->fuzz_level / (afl->n_fuzz[q->n_fuzz_entry] + 1);
-      break;
-
-    case QUAD:
-      factor =
-          q->fuzz_level * q->fuzz_level / (afl->n_fuzz[q->n_fuzz_entry] + 1);
-      break;
-
-    case MMOPT:
-      /* -- this was a more complex setup, which is good, but competed with
-         -- rare. the simpler algo however is good when rare is not.
-        // the newer the entry, the higher the pref_score
-        perf_score *= (1 + (double)((double)q->depth /
-        (double)afl->queued_paths));
-        // with special focus on the last 8 entries
-        if (afl->max_depth - q->depth < 8) perf_score *= (1 + ((8 -
-        (afl->max_depth - q->depth)) / 5));
-      */
-      // put focus on the last 5 entries
-      if (afl->max_depth - q->depth < 5) { perf_score *= 2; }
-
-      break;
-
-    case RARE:
-
-      // increase the score for every bitmap byte for which this entry
-      // is the top contender
-      perf_score += (q->tc_ref * 10);
-      // the more often fuzz result paths are equal to this queue entry,
-      // reduce its value
-      perf_score *= (1 - (double)((double)afl->n_fuzz[q->n_fuzz_entry] /
-                                  (double)afl->fsrv.total_execs));
-
-      break;
-
-    default:
-      PFATAL("Unknown Power Schedule");
-
-  }
-
-  if (unlikely(afl->schedule >= EXPLOIT && afl->schedule <= QUAD)) {
-
-    if (factor > MAX_FACTOR) { factor = MAX_FACTOR; }
-    perf_score *= factor / POWER_BETA;
-
-  }
-
   // MOpt mode
   if (afl->limit_time_sig != 0 && afl->max_depth - q->depth < 3) {
 
     perf_score *= 2;
 
-  } else if (afl->schedule != COE && perf_score < 1) {
-
-    // Add a lower bound to AFLFast's energy assignment strategies
-    perf_score = 1;
-
   }
 
   /* Make sure that we don't go over limit. */
diff --git a/src/afl-fuzz-state.c b/src/afl-fuzz-state.c
index 61bd06b..59bc838 100644
--- a/src/afl-fuzz-state.c
+++ b/src/afl-fuzz-state.c
@@ -115,6 +115,7 @@ void afl_state_init(afl_state_t *afl, uint32_t map_size) {
   afl->virgin_bits = ck_alloc(map_size);
   afl->virgin_tmout = ck_alloc(map_size);
   afl->virgin_crash = ck_alloc(map_size);
+  afl->branch_hit_counts = ck_alloc(map_size);
   afl->var_bytes = ck_alloc(map_size);
   afl->top_rated = ck_alloc(map_size * sizeof(void *));
   afl->clean_trace = ck_alloc(map_size);
@@ -475,6 +476,7 @@ void afl_state_deinit(afl_state_t *afl) {
   ck_free(afl->virgin_bits);
   ck_free(afl->virgin_tmout);
   ck_free(afl->virgin_crash);
+  ck_free(afl->branch_hit_counts);
   ck_free(afl->var_bytes);
   ck_free(afl->top_rated);
   ck_free(afl->clean_trace);
diff --git a/src/afl-fuzz.c b/src/afl-fuzz.c
index 269ce1b..c72fea5 100644
--- a/src/afl-fuzz.c
+++ b/src/afl-fuzz.c
@@ -1206,6 +1206,7 @@ int main(int argc, char **argv_orig, char **envp) {
   if (!afl->in_bitmap) { memset(afl->virgin_bits, 255, afl->fsrv.map_size); }
   memset(afl->virgin_tmout, 255, afl->fsrv.map_size);
   memset(afl->virgin_crash, 255, afl->fsrv.map_size);
+  memset(afl->branch_hit_counts, 0, afl->fsrv.map_size);
 
   init_count_class16();
 
