diff --git a/afl-fuzz.c b/afl-fuzz.c
index fc9d210..9455eed 100644
--- a/afl-fuzz.c
+++ b/afl-fuzz.c
@@ -152,7 +152,8 @@ EXP_ST u8* trace_bits;                /* SHM with instrumentation bitmap  */
 
 EXP_ST u8  virgin_bits[MAP_SIZE],     /* Regions yet untouched by fuzzing */
            virgin_tmout[MAP_SIZE],    /* Bits we haven't seen in tmouts   */
-           virgin_crash[MAP_SIZE];    /* Bits we haven't seen in crashes  */
+           virgin_crash[MAP_SIZE],    /* Bits we haven't seen in crashes  */
+           hit_counts[MAP_SIZE];
 
 static u8  var_bytes[MAP_SIZE];       /* Bytes that appear to be variable */
 
@@ -909,6 +910,7 @@ static inline u8 has_new_bits(u8* virgin_map) {
 
   u64* current = (u64*)trace_bits;
   u64* virgin  = (u64*)virgin_map;
+  u64* hits    = (u64*)hit_counts;
 
   u32  i = (MAP_SIZE >> 3);
 
@@ -916,6 +918,7 @@ static inline u8 has_new_bits(u8* virgin_map) {
 
   u32* current = (u32*)trace_bits;
   u32* virgin  = (u32*)virgin_map;
+  u32* hits    = (u32*)hit_counts;
 
   u32  i = (MAP_SIZE >> 2);
 
@@ -929,40 +932,57 @@ static inline u8 has_new_bits(u8* virgin_map) {
        that have not been already cleared from the virgin map - since this will
        almost always be the case. */
 
-    if (unlikely(*current) && unlikely(*current & *virgin)) {
+    if (unlikely(*current)) {
 
-      if (likely(ret < 2)) {
+      u8* cur = (u8*)current;
+      u8* hit = (u8*)hits;
 
-        u8* cur = (u8*)current;
-        u8* vir = (u8*)virgin;
+  #ifdef WORD_SIZE_64
+      for (int i = 0; i < 8; i++) {
+  #else
+      for (int i = 0; i < 4; i++) {
+  #endif
 
-        /* Looks like we have not found any new bytes yet; see if any non-zero
-           bytes in current[] are pristine in virgin[]. */
+        if (cur[i] && hit[i] < 0xFF) hit[i]++;
 
-#ifdef WORD_SIZE_64
+      }
 
-        if ((cur[0] && vir[0] == 0xff) || (cur[1] && vir[1] == 0xff) ||
-            (cur[2] && vir[2] == 0xff) || (cur[3] && vir[3] == 0xff) ||
-            (cur[4] && vir[4] == 0xff) || (cur[5] && vir[5] == 0xff) ||
-            (cur[6] && vir[6] == 0xff) || (cur[7] && vir[7] == 0xff)) ret = 2;
-        else ret = 1;
+      if (unlikely(*current & *virgin)) {
 
-#else
+        if (likely(ret < 2)) {
 
-        if ((cur[0] && vir[0] == 0xff) || (cur[1] && vir[1] == 0xff) ||
-            (cur[2] && vir[2] == 0xff) || (cur[3] && vir[3] == 0xff)) ret = 2;
-        else ret = 1;
+          u8* vir = (u8*)virgin;
 
-#endif /* ^WORD_SIZE_64 */
+          /* Looks like we have not found any new bytes yet; see if any non-zero
+             bytes in current[] are pristine in virgin[]. */
 
-      }
+  #ifdef WORD_SIZE_64
+
+          if ((cur[0] && vir[0] == 0xff) || (cur[1] && vir[1] == 0xff) ||
+              (cur[2] && vir[2] == 0xff) || (cur[3] && vir[3] == 0xff) ||
+              (cur[4] && vir[4] == 0xff) || (cur[5] && vir[5] == 0xff) ||
+              (cur[6] && vir[6] == 0xff) || (cur[7] && vir[7] == 0xff)) ret = 2;
+          else ret = 1;
+
+  #else
 
-      *virgin &= ~*current;
+          if ((cur[0] && vir[0] == 0xff) || (cur[1] && vir[1] == 0xff) ||
+              (cur[2] && vir[2] == 0xff) || (cur[3] && vir[3] == 0xff)) ret = 2;
+          else ret = 1;
+
+  #endif /* ^WORD_SIZE_64 */
+
+        }
+
+        *virgin &= ~*current;
+
+      }
 
     }
 
     current++;
     virgin++;
+    hits++;
 
   }
 
@@ -1338,7 +1358,8 @@ static void cull_queue(void) {
      If yes, and if it has a top_rated[] contender, let's use it. */
 
   for (i = 0; i < MAP_SIZE; i++)
-    if (top_rated[i] && (temp_v[i >> 3] & (1 << (i & 7)))) {
+    if (hit_counts[i] < 0xFF && top_rated[i]
+        && (temp_v[i >> 3] & (1 << (i & 7)))) {
 
       u32 j = MAP_SIZE >> 3;
 
@@ -1351,7 +1372,7 @@ static void cull_queue(void) {
       top_rated[i]->favored = 1;
       queued_favored++;
 
-      if (!top_rated[i]->was_fuzzed) pending_favored++;
+      pending_favored++;
 
     }
 
@@ -1375,6 +1396,7 @@ EXP_ST void setup_shm(void) {
 
   memset(virgin_tmout, 255, MAP_SIZE);
   memset(virgin_crash, 255, MAP_SIZE);
+  memset(hit_counts,     0, MAP_SIZE);
 
   shm_id = shmget(IPC_PRIVATE, MAP_SIZE, IPC_CREAT | IPC_EXCL | 0600);
 
@@ -5026,8 +5048,7 @@ static u8 fuzz_one(char** argv) {
        possibly skip to them at the expense of already-fuzzed or non-favored
        cases. */
 
-    if ((queue_cur->was_fuzzed || !queue_cur->favored) &&
-        UR(100) < SKIP_TO_NEW_PROB) return 1;
+    if (!queue_cur->favored && UR(100) < SKIP_TO_NEW_PROB) return 1;
 
   } else if (!dumb_mode && !queue_cur->favored && queued_paths > 10) {
 
@@ -6673,7 +6694,6 @@ abandon_entry:
   if (!stop_soon && !queue_cur->cal_failed && !queue_cur->was_fuzzed) {
     queue_cur->was_fuzzed = 1;
     pending_not_fuzzed--;
-    if (queue_cur->favored) pending_favored--;
   }
 
   munmap(orig_in, queue_cur->len);
