# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""Creates build jobs."""

import os
import subprocess
import time

from rq.job import Job


BASE_TAG = 'gcr.io/fuzzbench'


def cache_from(image_tag):
    """Returns optional option."""
    if os.environ.get('RUNNING_ON_CI', None):
        return '--cache-from ' + image_tag
    return ''


def cache_from_base(image_tag):
    """Returns optional option."""
    if os.environ.get('DISABLE_REMOTE_CACHE_FOR_BASE', None):
        return ""
    return '--cache-from ' + image_tag


def build_image(name):
    """Builds a Docker image."""
    image_tag = os.path.join(BASE_TAG, name)
    return subprocess.run(['docker', 'build',
                    '--tag', image_tag, # cache_from_base(image_tag),
                    os.path.join('docker', name)
                    ],
                    check=True)


def pull_image(name):
    """Pulls a Docker image."""


def pull_base_clang():
    """Pulls the base clang from oss-fuzz-base."""
    return pull_image('gcr.io/oss-fuzz-base/base-clang')


def build_base_builder():
    """Builds the base builder image."""
    name = 'base-builder'
    image_tag = os.path.join(BASE_TAG, name)
    return subprocess.run(['docker', 'build',
                    '--tag', image_tag,
                    # cache_from_base(image_tag),
                    # cache_from_base('gcr.io/oss-fuzz-base/base-clang'),
                    os.path.join('docker', name)
                    ],
                    check=True)


def create_build_jobs(config):
    """Creates all image building jobs."""
    ret_jobs = []
    # 1. base-image
    base_image = Job.create(build_image, name='base-image', id='base-image')
    pull_base_clang = Job.create(pull_base_clang, id='pull-base-clang')

    # 2. base-runner
    base_runner = Job.create(build_image, name='base-runner', id='base-runner', depends_on='base-image')

    # 3. base-builder
    base_builder = Job.create(build_base_builder, id='base-builder', depends_on='base-runner')

    ret_jobs.append(base_image)
    ret_jobs.append(base_builder)
    ret_jobs.append(base_runner)
    return ret_jobs
